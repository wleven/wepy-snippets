{
  "wepy.request": {
    "description": "网络请求",
    "prefix": "wepy.request",
    "body": [
      "wepy.request({",
      "  url: '${1:url}', //开发者服务器接口地址\",",
      "  data: '${2:data}', //请求的参数\",",
      "  method: '${3|GET,OPTIONS, HEAD, POST, PUT, DELETE, TRACE, CONNECT|}',",
      "  dataType: '${4:json}', //如果设为json，会尝试对返回的数据做一次 JSON.parse",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.uploadFile": {
    "description": "文件上传",
    "prefix": "wepy.uploadFile",
    "body": [
      "wepy.uploadFile({",
      "  url: '${1:url}', //开发者服务器 url",
      "  filePath: '${2:filePath}', //要上传文件资源的路径",
      "  name: '${3:name}', //文件对应的 key , 开发者在服务器端通过这个 key 可以获取到文件二进制内容",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.downloadFile": {
    "description": "文件下载",
    "prefix": "wepy.downloadFile",
    "body": [
      "wepy.uploadFile({",
      "  url: '${1:url}', // 下载资源的 url",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.connectSocket": {
    "description": "创建Socket连接",
    "prefix": "wepy.connectSocket",
    "body": [
      "wepy.uploadFile({",
      "  url: '${1:url}', //开发者服务器接口地址，必须是 wss 协议，且域名必须是后台配置的合法域名",
      "  method: '${2:GET}', //有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT",
      "  protocols: '{{${3:protocols}}}', //子协议数组",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onSocketOpen": {
    "description": "监听WebSocket连接打开事件",
    "prefix": "wepy.onSocketOpen",
    "body": [
      "wepy.onSocketOpen(res => {",
      "  console.log('WebSocket连接已打开！');",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onSocketError": {
    "description": "监听WebSocket错误",
    "prefix": "wepy.onSocketError",
    "body": [
      "wepy.onSocketError(res => {",
      "  console.log('WebSocket连接打开失败，请检查！');",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.sendSocketMessage": {
    "description": "通过 WebSocket 连接发送数据，需要先 wepy.connectSocket，并在 wepy.onSocketOpen 回调之后才能发送",
    "prefix": "wepy.sendSocketMessage",
    "body": [
      "wepy.sendSocketMessage({",
      "  data: '${1:data}', //需要发送的内容",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onSocketMessage": {
    "description": "监听WebSocket接受到服务器的消息事件",
    "prefix": "wepy.onSocketMessage",
    "body": [
      "wepy.onSocketMessage(res => {",
      "  console.log('收到服务器内容：' + res.data);",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.closeSocket": {
    "description": "关闭 WebSocket 连接",
    "prefix": "wepy.closeSocket",
    "body": [
      "wepy.closeSocket(res => {",
      "  console.log('WebSocket 已关闭！');",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onSocketClose": {
    "description": "监听WebSocket关闭",
    "prefix": "wepy.onSocketClose",
    "body": [
      "wepy.onSocketClose(res => {",
      "  console.log('WebSocket 已关闭！');",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.chooseImage": {
    "description": "从本地相册选择图片或使用相机拍照",
    "prefix": "wepy.chooseImage",
    "body": [
      "wepy.chooseImage({",
      "  count: '${1:9}', //最多可以选择的图片张数,",
      "  success: res => {}, //返回图片的本地文件路径列表 tempFilePaths,",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.previewImage": {
    "description": "预览图片",
    "prefix": "wepy.previewImage",
    "body": [
      "wepy.previewImage({",
      "  urls: '${1:urls}' //需要预览的图片链接列表,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getImageInfo": {
    "description": "获取图片信息",
    "prefix": "wepy.getImageInfo",
    "body": [
      "wepy.getImageInfo({",
      "  src: '${1:src}', //图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径,",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.saveImageToPhotosAlbum": {
    "description": "保存图片到系统相册 需要用户授权 scope.writePhotosAlbum",
    "prefix": "wepy.saveImageToPhotosAlbum",
    "body": [
      "wepy.saveImageToPhotosAlbum({",
      "  filePath: '${1:filePath}', //图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径,",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.login": {
    "description": "调用接口wepy.login() 获取临时登录凭证（code）",
    "prefix": "wepy.login",
    "body": [
      "wepy.login({",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.checkSession": {
    "description": "校验用户当前session_key是否有效",
    "prefix": "wepy.checkSession",
    "body": [
      "wepy.checkSession({",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.authorize": {
    "description": "提前向用户发起授权请求。调用后会立刻弹窗询问用户是否同意授权小程序使用某项功能或获取用户的某些数据，但不会实际调用对应接口。如果用户之前已经同意授权，则不会出现弹窗，直接返回成功。",
    "prefix": "wepy.authorize",
    "body": [
      "wepy.authorize({",
      "  scope:",
      "    '${1|scope.userInfo,scope.userLocation,scope.address,scope.invoiceTitle,scope.werun,scope.record,scope.writePhotosAlbum,scope.camera|}',",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getUserInfo": {
    "description": "获取用户信息，withCredentials 为 true 时需要先调用 wepy.login 接口。需要用户授权 scope.userInfo",
    "prefix": "wepy.getUserInfo",
    "body": [
      "wepy.getUserInfo({",
      "  withCredentials: false,",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.requestPayment": {
    "description": "发起微信支付",
    "prefix": "wepy.requestPayment",
    "body": [
      "wepy.requestPayment({",
      "  timeStamp: '${1:timeStamp}', //时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间,",
      "  nonceStr: '${2:nonceStr}', //随机字符串，长度为32个字符以下,",
      "  package: '${3:package}', //统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*,",
      "  signType: 'MD5', //签名算法，暂支持 MD5,",
      "  paySign: '${4:paySign}', //签名,具体签名方案参见小程序支付接口文档,",
      "  success: res => {},",
      "  fail: () => {},",
      "  complete: () => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onShareAppMessage": {
    "description": "在 Page 中定义 onShareAppMessage 函数，设置该页面的转发信息",
    "prefix": "wepy.onShareAppMessage",
    "body": [
      "onShareAppMessage() {",
      "  return {",
      "    title: '${1:自定义转发标题}',",
      "    path: '${2:/pages/index}',",
      "    imageUrl: '${3:url}',",
      "    success: res => {},",
      "    fail: () => {},",
      "    complete: () => {}",
      "  };",
      "}"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showShareMenu": {
    "description": "显示当前页面的转发按钮",
    "prefix": "wepy.showShareMenu",
    "body": [
      "wepy.showShareMenu({ withShareTicket: true });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.hideShareMenu": {
    "description": "隐藏当前页面的转发按钮",
    "prefix": "wepy.hideShareMenu",
    "body": [
      "wepy.hideShareMenu();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.updateShareMenu": {
    "description": "更新转发属性",
    "prefix": "wepy.updateShareMenu",
    "body": [
      "wepy.updateShareMenu({ withShareTicket: true });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getShareInfo": {
    "description": "获取转发详细信息",
    "prefix": "wepy.getShareInfo",
    "body": [
      "wepy.getShareInfo({ withShareTicket: true });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.chooseAddress": {
    "description": "调起用户编辑收货地址原生界面，并在编辑完成后返回用户选择的地址 需要用户授权 scope.address",
    "prefix": "wepy.chooseAddress",
    "body": [
      "wepy.chooseAddress({",
      "  success: function(res) {",
      "    console.log(res.userName);",
      "    console.log(res.postalCode);",
      "    console.log(res.provinceName);",
      "    console.log(res.cityName);",
      "    console.log(res.countyName);",
      "    console.log(res.detailInfo);",
      "    console.log(res.nationalCode);",
      "    console.log(res.telNumber);",
      "  }",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.addCard": {
    "description": "批量添加卡券",
    "prefix": "wepy.addCard",
    "body": [
      "wepy.addCard({",
      "  cardList: [",
      "    {",
      "      cardId: '',",
      "      cardExt: '{\"code\": \"\", \"openid\": \"\", \"timestamp\": \"\", \"signature\":\"\"}'",
      "    }",
      "  ],",
      "  success: function(res) {",
      "    console.log(res.cardList); // 卡券添加结果",
      "  }",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.openCard": {
    "description": "查看微信卡包中的卡券",
    "prefix": "wepy.openCard",
    "body": [
      "wepy.openCard({",
      "  //需要打开的卡券列表，列表内参数详见openCard 请求对象说明",
      "  cardList: [",
      "    {",
      "      cardId: '',",
      "      code: ''",
      "    }",
      "  ],",
      "  success: function(res) {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.openSetting": {
    "description": "调起客户端小程序设置界面，返回用户设置的操作结果",
    "prefix": "wepy.openSetting",
    "body": [
      "wepy.openSetting({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getSetting": {
    "description": "获取用户的当前设置",
    "prefix": "wepy.getSetting",
    "body": [
      "wepy.getSetting({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getWeRunData": {
    "description": "获取用户过去三十天微信运动步数，需要先调用 wepy.login 接口 需要用户授权 scope.werun",
    "prefix": "wepy.getWeRunData",
    "body": [
      "wepy.getWeRunData({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.navigateToMiniProgram": {
    "description": "打开同一公众号下关联的另一个小程序。（注：必须是同一公众号下，而非同个 open 账号下）",
    "prefix": "wepy.navigateToMiniProgram",
    "body": [
      "wepy.navigateToMiniProgram({",
      "  appId: '${1:appId}', //要打开的小程序 appId,",
      "  path: '', //打开的页面路径，如果为空则打开首页,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.navigateBackMiniProgram": {
    "description": "返回到上一个小程序，只有在当前小程序是被其他小程序打开时可以调用成功",
    "prefix": "wepy.navigateBackMiniProgram",
    "body": [
      "wepy.navigateBackMiniProgram({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.chooseInvoiceTitle": {
    "description": "选择用户的发票抬头 要用户授权 scope.invoiceTitle",
    "prefix": "wepy.chooseInvoiceTitle",
    "body": [
      "wepy.chooseInvoiceTitle({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.checkIsSupportSoterAuthentication": {
    "description": "获取本机支持的 SOTER 生物认证方式",
    "prefix": "wepy.checkIsSupportSoterAuthentication",
    "body": [
      "wepy.checkIsSupportSoterAuthentication({",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startSoterAuthentication": {
    "description": "开始 SOTER 生物认证",
    "prefix": "wepy.startSoterAuthentication",
    "body": [
      "wepy.startSoterAuthentication({",
      "  requestAuthModes: '${1:requestAuthModes}', //请求使用的可接受的生物认证方式,",
      "  challenge: '${2:requestAuthModes}', //挑战因子。挑战因子为调用者为此次生物鉴权准备的用于签名的字符串关键识别信息，将作为result_json的一部分，供调用者识别本次请求,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.checkIsSoterEnrolledInDevice": {
    "description": "获取设备内是否录入如指纹等生物信息的接口",
    "prefix": "wepy.checkIsSoterEnrolledInDevice",
    "body": [
      "wepy.checkIsSoterEnrolledInDevice({",
      "  checkAuthMode: '${1|fingerPrint,facial,speech|}', //认证方式,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getExtConfig": {
    "description": "获取第三方平台自定义的数据字段。",
    "prefix": "wepy.getExtConfig",
    "body": [
      "wepy.getExtConfig({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getExtConfigSync": {
    "description": "获取第三方平台自定义的数据字段的同步接口",
    "prefix": "wepy.getExtConfigSync",
    "body": [
      "wepy.getExtConfigSync();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showToast": {
    "description": "显示消息提示框",
    "prefix": "wepy.showToast",
    "body": [
      "wepy.showToast({",
      "  title: '${1:title}', //提示的内容,",
      "  icon: '${2|success,loading,none|}', //图标,",
      "  duration: 2000, //延迟时间,",
      "  mask: true, //显示透明蒙层，防止触摸穿透,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showLoading": {
    "description": "显示 loading 提示框, 需主动调用 wepy.hideLoading 才能关闭提示框",
    "prefix": "wepy.showLoading",
    "body": [
      "wepy.showLoading({",
      "  title: '${1:Loading...}', //提示的内容,",
      "  mask: true, //显示透明蒙层，防止触摸穿透,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.hideToast": {
    "description": "隐藏消息提示框",
    "prefix": "wepy.hideToast",
    "body": [
      "wepy.hideToast();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.hideLoading": {
    "description": "隐藏loading提示框",
    "prefix": "wepy.hideLoading",
    "body": [
      "wepy.hideLoading();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showModal": {
    "description": "​显示模态弹窗",
    "prefix": "wepy.showModal",
    "body": [
      "wepy.showModal({",
      "  title: '${1:提示}', //提示的标题,",
      "  content: '${2:content}', //提示的内容,",
      "  showCancel: true, //是否显示取消按钮,",
      "  cancelText: '${3:取消}', //取消按钮的文字，默认为取消，最多 4 个字符,",
      "  cancelColor: '${4:#000000}', //取消按钮的文字颜色,",
      "  confirmText: '${5:确定}', //确定按钮的文字，默认为取消，最多 4 个字符,",
      "  confirmColor: '${6:#3CC51F}', //确定按钮的文字颜色,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showActionSheet": {
    "description": "​​显示操作菜单",
    "prefix": "wepy.showActionSheet",
    "body": [
      "wepy.showActionSheet({",
      "  itemList: '${1:itemList}', //按钮的文字数组，数组长度最大为6个,",
      "  itemColor: '${2:#000000}', //按钮的文字颜色,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setNavigationBarTitle": {
    "description": "​​动态设置当前页面的标题",
    "prefix": "wepy.setNavigationBarTitle",
    "body": [
      "wepy.setNavigationBarTitle({ title: '${1:title}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showNavigationBarLoading": {
    "description": "在当前页面显示导航条加载动画",
    "prefix": "wepy.showNavigationBarLoading",
    "body": [
      "wepy.showNavigationBarLoading();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.hideNavigationBarLoading": {
    "description": "隐藏导航条加载动画",
    "prefix": "wepy.hideNavigationBarLoading",
    "body": [
      "wepy.hideNavigationBarLoading();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setNavigationBarColor": {
    "description": "​​设置导航条颜色",
    "prefix": "wepy.setNavigationBarColor",
    "body": [
      "wepy.setNavigationBarColor({",
      "  frontColor: '${1:#ffffff}', //前景颜色值，包括按钮、标题、状态栏的颜色，仅支持 #ffffff 和 #000000,",
      "  backgroundColor: '${2:#ff0000}', //背景颜色值，有效值为十六进制颜色,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setTabBarBadge": {
    "description": "​​为 tabBar 某一项的右上角添加文本",
    "prefix": "wepy.setTabBarBadge",
    "body": [
      "wepy.setTabBarBadge({",
      "  index: 0, //tabBar的哪一项，从左边算起,",
      "  text: '${2:1}' //显示的文本，超过 3 个字符则显示成“…”,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.removeTabBarBadge": {
    "description": "​​移除 tabBar 某一项右上角的文本",
    "prefix": "wepy.removeTabBarBadge",
    "body": [
      "wepy.removeTabBarBadge({",
      "  index: 0 //tabBar的哪一项，从左边算起,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showTabBarRedDot": {
    "description": "​​显示 tabBar 某一项的右上角的红点",
    "prefix": "wepy.showTabBarRedDot",
    "body": [
      "wepy.showTabBarRedDot({",
      "  index: 0 //tabBar的哪一项，从左边算起,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.hideTabBarRedDot": {
    "description": "​​隐藏 tabBar 某一项的右上角的红点",
    "prefix": "wepy.hideTabBarRedDot",
    "body": [
      "wepy.hideTabBarRedDot({",
      "  index: 0 //tabBar的哪一项，从左边算起,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setTabBarStyle": {
    "description": "​​动态设置 tabBar 的整体样式",
    "prefix": "wepy.setTabBarStyle",
    "body": [
      "wepy.setTabBarStyle({",
      "  color: '${1:#FF0000}', //tab 上的文字默认颜色,",
      "  selectedColor: '${2:#00FF00}', //tab 上的文字选中时的颜色,",
      "  backgroundColor: '${3:#0000FF}', //tab 的背景色,",
      "  borderStyle: '${4:white}' //tabbar上边框的颜色， 仅支持 black/white,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setTabBarItem": {
    "description": "​​动态设置 tabBar 某一项的内容",
    "prefix": "wepy.setTabBarItem",
    "body": [
      "wepy.setTabBarItem({",
      "  index: 0, //tabBar的哪一项，从左边算起,",
      "  text: '${1:text}', //tab 上按钮文字,",
      "  iconPath: '${2:iconPath}', //图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片,",
      "  selectedIconPath: '${3:selectedIconPath}' //选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.showTabBar": {
    "description": "​​显示 tabBar",
    "prefix": "wepy.showTabBar",
    "body": [
      "wepy.showTabBar({",
      "  animation: true //是否需要动画效果",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.hideTabBar": {
    "description": "​​隐藏 tabBar",
    "prefix": "wepy.hideTabBar",
    "body": [
      "wepy.hideTabBar({",
      "  animation: true //是否需要动画效果",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setTopBarText": {
    "description": "​​动态设置置顶栏文字内容，只有当前小程序被置顶时能生效",
    "prefix": "wepy.setTopBarText",
    "body": [
      "wepy.setTopBarText({ text: '${1:text}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.navigateTo": {
    "description": "保留当前页面，跳转到应用内的某个页面，使用wepy.navigateBack可以返回到原页面。",
    "prefix": "wepy.navigateTo",
    "body": [
      "wepy.navigateTo({ url: '${1:url}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.redirectTo": {
    "description": "关闭当前页面，跳转到应用内的某个页面",
    "prefix": "wepy.redirectTo",
    "body": [
      "wepy.redirectTo({ url: '${1:url}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.reLaunch": {
    "description": "关闭所有页面，打开到应用内的某个页面",
    "prefix": "wepy.reLaunch",
    "body": [
      "wepy.reLaunch({ url: '${1:url}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.switchTab": {
    "description": "跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面",
    "prefix": "wepy.switchTab",
    "body": [
      "wepy.switchTab({ url: '${1:url}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.navigateBack": {
    "description": "关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages()) 获取当前的页面栈，决定需要返回几层",
    "prefix": "wepy.navigateBack",
    "body": [
      "wepy.navigateBack({",
      "  delta: 1 //返回的页面数，如果 delta 大于现有页面数，则返回到首页,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.createAnimation": {
    "description": "创建一个动画实例animation。调用实例的方法来描述动画。最后通过动画实例的export方法导出动画数据传递给组件的animation属性",
    "prefix": "wepy.createAnimation",
    "body": [
      "wepy.createAnimation({});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.pageScrollTo": {
    "description": "将页面滚动到目标位置",
    "prefix": "wepy.pageScrollTo",
    "body": [
      "wepy.pageScrollTo({",
      "  scrollTop: 0, //滚动到页面的目标位置（单位px）,",
      "  duration: 300 //滚动动画的时长，默认300ms，单位 ms,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startPullDownRefresh": {
    "description": "开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致",
    "prefix": "wepy.startPullDownRefresh",
    "body": [
      "wepy.startPullDownRefresh({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopPullDownRefresh": {
    "description": "停止下拉刷新",
    "prefix": "wepy.stopPullDownRefresh",
    "body": [
      "wepy.stopPullDownRefresh();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.makePhoneCall": {
    "description": "拨打电话",
    "prefix": "wepy.makePhoneCall",
    "body": [
      "wepy.makePhoneCall({ phoneNumber: '${1:00000000}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getLocation": {
    "description": "获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用",
    "prefix": "wepy.getLocation",
    "body": [
      "wepy.getLocation({",
      "  type: '${1|wgs84,gcj02|}', //默认为 wgs84 返回 gps 坐标，gcj02 返回可用于wepy.openLocation的坐标,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.chooseLocation": {
    "description": "打开地图选择位置 需要用户授权 scope.userLocation",
    "prefix": "wepy.chooseLocation",
    "body": [
      "wepy.chooseLocation({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.openLocation": {
    "description": "使用微信内置地图查看位置 需要用户授权 scope.userLocation",
    "prefix": "wepy.openLocation",
    "body": [
      "wepy.openLocation({",
      "  latitude: '${1:latitude}', //纬度，范围为-90~90，负数表示南纬,",
      "  longitude: '${2:longitude}', //经度，范围为-180~180，负数表示西经,",
      "  scale: 15, //缩放比例，范围5~18,",
      "  name: '${4:name}', //位置名,",
      "  address: '${5:address}', //地址的详细说明,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setStorage": {
    "description": "将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口",
    "prefix": "wepy.setStorage",
    "body": [
      "wepy.setStorage({",
      "  key: '${1:key}',",
      "  value: '${2:value}'",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setStorageSync": {
    "description": "将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口",
    "prefix": "wepy.setStorageSync",
    "body": [
      "wepy.setStorageSync({",
      "  key: '${1:key}',",
      "  value: '${2:value}'",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getStorage": {
    "description": "从本地缓存中异步获取指定 key 对应的内容",
    "prefix": "wepy.getStorage",
    "body": [
      "wepy.getStorage({",
      "  key: '${key:key}',",
      "  success: (res) => {",
      "    console.log(res.data)",
      "  },",
      "  fail: () => { },",
      "  complete: () => { }",
      "})"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getStorageSync": {
    "description": "从本地缓存中同步获取指定 key 对应的内容",
    "prefix": "wepy.getStorageSync",
    "body": [
      "wepy.getStorageSync({ key: '${1:key}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getStorageInfo": {
    "description": "异步获取当前storage的相关信息",
    "prefix": "wepy.getStorageInfo",
    "body": [
      "wepy.getStorageInfo({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getStorageInfoSync": {
    "description": "同步获取当前storage的相关信息",
    "prefix": "wepy.getStorageInfoSync",
    "body": [
      "wepy.getStorageInfoSync();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.removeStorage": {
    "description": "从本地缓存中异步移除指定 key",
    "prefix": "wepy.removeStorage",
    "body": [
      "wepy.removeStorage({",
      "  key: '${1:key}',",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.removeStorageSync": {
    "description": "从本地缓存中同步移除指定 key",
    "prefix": "wepy.removeStorageSync",
    "body": [
      "wepy.removeStorageSync({ key: '${1:key}' });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.clearStorage": {
    "description": "清理本地数据缓存",
    "prefix": "wepy.clearStorage",
    "body": [
      "wepy.clearStorage();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.clearStorageSync": {
    "description": "同步清理本地数据缓存",
    "prefix": "wepy.clearStorageSync",
    "body": [
      "wepy.clearStorageSync();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.saveFile": {
    "description": "保存文件到本地。注意：saveFile 会把临时文件移动，因此调用成功后传入的 tempFilePath 将不可用",
    "prefix": "wepy.saveFile",
    "body": [
      "wepy.saveFile({",
      "  tempFilePath: '${1:tempFilePath}', //需要保存的文件的临时路径,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getFileInfo": {
    "description": "获取文件信息",
    "prefix": "wepy.getFileInfo",
    "body": [
      "wepy.getFileInfo({",
      "  filePath: '${1:filePath}', //本地文件路径,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getSavedFileList": {
    "description": "获取本地已保存的文件列表",
    "prefix": "wepy.getSavedFileList",
    "body": [
      "wepy.getSavedFileList({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getSavedFileInfo": {
    "description": "获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用 wepy.getFileInfo 接口",
    "prefix": "wepy.getSavedFileInfo",
    "body": [
      "wepy.getSavedFileInfo({",
      "  filePath: '${1:filePath}', //文件路径,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.removeSavedFile": {
    "description": "删除本地存储的文件",
    "prefix": "wepy.removeSavedFile",
    "body": [
      "wepy.removeSavedFile({",
      "  filePath: '${1:filePath}', //文件路径,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.openDocument": {
    "description": "新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx",
    "prefix": "wepy.openDocument",
    "body": [
      "wepy.openDocument({",
      "  filePath: '${1:filePath}', //文件路径，可通过 downFile 获得,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getSystemInfo": {
    "description": "获取系统信息",
    "prefix": "wepy.getSystemInfo",
    "body": [
      "wepy.getSystemInfo({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getSystemInfoSync": {
    "description": "获取系统信息同步接口",
    "prefix": "wepy.getSystemInfoSync",
    "body": [
      "wepy.getSystemInfoSync();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getNetworkType": {
    "description": "获取网络类型",
    "prefix": "wepy.getNetworkType",
    "body": [
      "wepy.getNetworkType({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onNetworkStatusChange": {
    "description": "监听网络状态变化",
    "prefix": "wepy.onNetworkStatusChange",
    "body": [
      "wepy.onNetworkStatusChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onAccelerometerChange": {
    "description": "监听加速度数据，频率：5次/秒，接口调用后会自动开始监听，可使用 wepy.stopAccelerometer 停止监听",
    "prefix": "wepy.onAccelerometerChange",
    "body": [
      "wepy.onAccelerometerChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startAccelerometer": {
    "description": "开始监听加速度数据",
    "prefix": "wepy.startAccelerometer",
    "body": [
      "wepy.startAccelerometer();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopAccelerometer": {
    "description": "停止监听加速度数据",
    "prefix": "wepy.stopAccelerometer",
    "body": [
      "wepy.stopAccelerometer()"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onCompassChange": {
    "description": "监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用wepy.stopCompass停止监听",
    "prefix": "wepy.onCompassChange",
    "body": [
      "wepy.onCompassChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startCompass": {
    "description": "开始监听罗盘数据",
    "prefix": "wepy.startCompass",
    "body": [
      "wepy.startCompass()"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopCompass": {
    "description": "停止监听罗盘数据",
    "prefix": "wepy.stopCompass",
    "body": [
      "wepy.stopCompass();"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.scanCode": {
    "description": "调起客户端扫码界面，扫码成功后返回对应的结果",
    "prefix": "wepy.scanCode",
    "body": [
      "wepy.scanCode({",
      "  onlyFromCamera: true, //是否只能从相机扫码，不允许从相册选择图片,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setClipboardData": {
    "description": "设置系统剪贴板的内容",
    "prefix": "wepy.setClipboardData",
    "body": [
      "wepy.setClipboardData({",
      "  data: '${1:data}', //需要设置的内容,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getClipboardData": {
    "description": "获取系统剪贴板内容",
    "prefix": "wepy.getClipboardData",
    "body": [
      "wepy.getClipboardData({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.openBluetoothAdapter": {
    "description": "初始化小程序蓝牙模块，生效周期为调用wepy.openBluetoothAdapter至调用wepy.closeBluetoothAdapter或小程序被销毁为止",
    "prefix": "wepy.openBluetoothAdapter",
    "body": [
      "wepy.openBluetoothAdapter({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.closeBluetoothAdapter": {
    "description": "关闭蓝牙模块，使其进入未初始化状态。调用该方法将断开所有已建立的链接并释放系统资源",
    "prefix": "wepy.closeBluetoothAdapter",
    "body": [
      "wepy.closeBluetoothAdapter({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getBluetoothAdapterState": {
    "description": "获取本机蓝牙适配器状态",
    "prefix": "wepy.getBluetoothAdapterState",
    "body": [
      "wepy.getBluetoothAdapterState({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onBluetoothAdapterStateChange": {
    "description": "监听蓝牙适配器状态变化事件",
    "prefix": "wepy.onBluetoothAdapterStateChange",
    "body": [
      "wepy.onBluetoothAdapterStateChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startBluetoothDevicesDiscovery": {
    "description": "开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索",
    "prefix": "wepy.startBluetoothDevicesDiscovery",
    "body": [
      "wepy.startBluetoothDevicesDiscovery({",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopBluetoothDevicesDiscovery": {
    "description": "停止搜寻附近的蓝牙外围设备。若已经找到需要的蓝牙设备并不需要继续搜索时，建议调用该接口停止蓝牙搜索",
    "prefix": "wepy.stopBluetoothDevicesDiscovery",
    "body": [
      "wepy.stopBluetoothDevicesDiscovery({",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getBluetoothDevices": {
    "description": "获取在小程序蓝牙模块生效期间所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备",
    "prefix": "wepy.getBluetoothDevices",
    "body": [
      "wepy.getBluetoothDevices({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onBluetoothDeviceFound": {
    "description": "监听寻找到新设备的事件",
    "prefix": "wepy.onBluetoothDeviceFound",
    "body": [
      "wepy.onBluetoothDeviceFound(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getConnectedBluetoothDevices": {
    "description": "根据 uuid 获取处于已连接状态的设备",
    "prefix": "wepy.getConnectedBluetoothDevices",
    "body": [
      "wepy.getConnectedBluetoothDevices({",
      "  services: '${1:services}', //蓝牙设备主 service 的 uuid 列表,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.createBLEConnection": {
    "description": "连接低功耗蓝牙设备",
    "prefix": "wepy.createBLEConnection",
    "body": [
      "wepy.createBLEConnection({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 getDevices 接口,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.closeBLEConnection": {
    "description": "断开与低功耗蓝牙设备的连接",
    "prefix": "wepy.closeBLEConnection",
    "body": [
      "wepy.closeBLEConnection({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 getDevices 接口,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onBLEConnectionStateChange": {
    "description": "监听低功耗蓝牙连接状态的改变事件，包括开发者主动连接或断开连接，设备丢失，连接异常断开等等",
    "prefix": "wepy.onBLEConnectionStateChange",
    "body": [
      "wepy.onBLEConnectionStateChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getBLEDeviceServices": {
    "description": "获取蓝牙设备所有 service（服务）",
    "prefix": "wepy.getBLEDeviceServices",
    "body": [
      "wepy.getBLEDeviceServices({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 getDevices 接口,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getBLEDeviceCharacteristics": {
    "description": "获取蓝牙设备某个服务中的所有 characteristic（特征值）",
    "prefix": "wepy.getBLEDeviceCharacteristics",
    "body": [
      "wepy.getBLEDeviceCharacteristics({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 device 对象,",
      "  serviceId: '${2:serviceId}', //蓝牙服务 uuid,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.readBLECharacteristicValue": {
    "description": "读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性",
    "prefix": "wepy.readBLECharacteristicValue",
    "body": [
      "wepy.readBLECharacteristicValue({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 device 对象,",
      "  serviceId: '${2:serviceId}', //蓝牙服务 uuid,",
      "  characteristicId: '${3:characteristicId}', //蓝牙特征值的 uuid,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.writeBLECharacteristicValue": {
    "description": "读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性",
    "prefix": "wepy.writeBLECharacteristicValue",
    "body": [
      "wepy.writeBLECharacteristicValue({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 device 对象,",
      "  serviceId: '${2:serviceId}', //蓝牙服务 uuid,",
      "  characteristicId: '${3:characteristicId}', //蓝牙特征值的 uuid,",
      "  value: '${4:value}', //蓝牙设备特征值对应的二进制值,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.notifyBLECharacteristicValueChange": {
    "description": "启用低功耗蓝牙设备特征值变化时的 notify 功能，订阅特征值",
    "prefix": "wepy.notifyBLECharacteristicValueChange",
    "body": [
      "wepy.notifyBLECharacteristicValueChange({",
      "  deviceId: '${1:deviceId}', //蓝牙设备 id，参考 device 对象,",
      "  serviceId: '${2:serviceId}', //蓝牙服务 uuid,",
      "  characteristicId: '${3:characteristicId}', //蓝牙特征值的 uuid,",
      "  state: true, //true: 启用 notify; false: 停用 notify,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onBLECharacteristicValueChange": {
    "description": "监听低功耗蓝牙设备的特征值变化。必须先启用notify接口才能接收到设备推送的notification",
    "prefix": "wepy.onBLECharacteristicValueChange",
    "body": [
      "wepy.onBLECharacteristicValueChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startBeaconDiscovery": {
    "description": "开始搜索附近的iBeacon设备",
    "prefix": "wepy.startBeaconDiscovery",
    "body": [
      "wepy.startBeaconDiscovery({",
      "  uuids: '${1:uuids}', //iBeacon设备广播的 uuids,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopBeaconDiscovery": {
    "description": "停止搜索附近的iBeacon设备",
    "prefix": "wepy.stopBeaconDiscovery",
    "body": [
      "wepy.stopBeaconDiscovery()"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getBeacons": {
    "description": "获取所有已搜索到的iBeacon设备",
    "prefix": "wepy.getBeacons",
    "body": [
      "wepy.getBeacons({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onBeaconUpdate": {
    "description": "监听 iBeacon 设备的更新事件",
    "prefix": "wepy.onBeaconUpdate",
    "body": [
      "wepy.onBeaconUpdate(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onBeaconServiceChange": {
    "description": "监听 iBeacon 服务的状态变化",
    "prefix": "wepy.onBeaconServiceChange",
    "body": [
      "wepy.onBeaconServiceChange(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setScreenBrightness": {
    "description": "设置屏幕亮度",
    "prefix": "wepy.setScreenBrightness",
    "body": [
      "wepy.setScreenBrightness({",
      "  value: 1 //屏幕亮度值，范围 0~1，0 最暗，1 最亮,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getScreenBrightness": {
    "description": "获取屏幕亮度",
    "prefix": "wepy.getScreenBrightness",
    "body": [
      "wepy.getScreenBrightness({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setKeepScreenOn": {
    "description": "设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效",
    "prefix": "wepy.setKeepScreenOn",
    "body": [
      "wepy.setKeepScreenOn({",
      "  keepScreenOn: true //是否保持屏幕常亮,",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onUserCaptureScreen": {
    "description": "监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件",
    "prefix": "wepy.onUserCaptureScreen",
    "body": [
      "wepy.onUserCaptureScreen(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.vibrateLong": {
    "description": "使手机发生较长时间的振动（400ms）",
    "prefix": "wepy.vibrateLong",
    "body": [
      "wepy.vibrateLong()"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.vibrateShort": {
    "description": "使手机发生较短时间的振动（15ms）",
    "prefix": "wepy.vibrateShort",
    "body": [
      "wepy.vibrateShort()"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getHCEState": {
    "description": "判断当前设备是否支持 HCE 能力",
    "prefix": "wepy.getHCEState",
    "body": [
      "wepy.getHCEState({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startHCE": {
    "description": "初始化 NFC 模块",
    "prefix": "wepy.startHCE",
    "body": [
      "wepy.startHCE({",
      "  aid_list: '${1:aid_list}', //需要注册到系统的 AID 列表，每个 AID 为 String 类型,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopHCE": {
    "description": "关闭 NFC 模块 仅在安卓系统下有效",
    "prefix": "wepy.stopHCE",
    "body": [
      "wepy.stopHCE({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onHCEMessage": {
    "description": "监听 NFC 设备的消息回调，并在回调中处理",
    "prefix": "wepy.onHCEMessage",
    "body": [
      "wepy.onHCEMessage(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.sendHCEMessage": {
    "description": "发送 NFC 消息。仅在安卓系统下有效",
    "prefix": "wepy.sendHCEMessage",
    "body": [
      "wepy.sendHCEMessage({",
      "  data: '${1:data}', //二进制数据,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.startWifi": {
    "description": "初始化 Wi-Fi 模块",
    "prefix": "wepy.startWifi",
    "body": [
      "wepy.startWifi({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.stopWifi": {
    "description": "关闭 Wi-Fi 模块",
    "prefix": "wepy.stopWifi",
    "body": [
      "wepy.stopWifi({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.connectWifi": {
    "description": "连接 Wi-Fi。若已知 Wi-Fi 信息，可以直接利用该接口连接。仅 Android 与 iOS 11 以上版本支持",
    "prefix": "wepy.connectWifi",
    "body": [
      "wepy.connectWifi({",
      "  SSID: '${1:SSID}', //Wi-Fi 设备ssid,",
      "  BSSID: '${2:BSSID}', //Wi-Fi 设备BSSID,",
      "  password: '${3:password}', //Wi-Fi 设备password,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getWifiList": {
    "description": "请求获取 Wi-Fi 列表",
    "prefix": "wepy.getWifiList",
    "body": [
      "wepy.getWifiList({",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.getConnectedWifi": {
    "description": "获取已连接中的 Wi-Fi 信息",
    "prefix": "wepy.getConnectedWifi",
    "body": [
      "wepy.getConnectedWifi({ success: res => {} });"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onGetWifiList": {
    "description": "监听在获取到 Wi-Fi 列表数据时的事件，在回调中将返回 wifiList",
    "prefix": "wepy.onGetWifiList",
    "body": [
      "wepy.onGetWifiList(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.onWifiConnected": {
    "description": "监听连接上 Wi-Fi 的事件",
    "prefix": "wepy.onWifiConnected",
    "body": [
      "wepy.onWifiConnected(res => {});"
    ],
    "scope": "javascript,typescript"
  },
  "wepy.setWifiList": {
    "description": "iOS特有接口 在 onGetWifiList 回调后，利用接口设置 wifiList 中 AP 的相关信息",
    "prefix": "wepy.setWifiList",
    "body": [
      "wepy.setWifiList({",
      "  wifiList: '${1:wifiList}', //提供预设的 Wi-Fi 信息列表,",
      "  success: res => {}",
      "});"
    ],
    "scope": "javascript,typescript"
  }
}